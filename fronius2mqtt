#!/usr/bin/env python
from os import device_encoding

import aiohttp
import asyncio
import json
import logging
import pyfronius
import time

import iot_daemonize
import iot_daemonize.configuration as configuration

from bottle import request, route, post, run
from typing import Any, Callable, Dict, Final, Iterable, List, Tuple, Union

config = None

def extract_request_body():
    body = request.body
    string = body.getvalue().decode('utf-8')
    return string


def extract_request_data():
    json_string = extract_request_body()
    data = json.loads(json_string)
    return data


@route('/')
def index():
    return "Hello World!<br/>This is the fronius2mqtt daemon by Gerrit Beine"

@post('/current_data_powerflow/<device>')
def current_data_powerflow(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    _power_flow(data['Body'], device)
    return "OK"


@post('/current_data_inverter/<device>')
def current_data_inverter(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    _current_data_inverter(data['Body'], device)
    return "OK"


@post('/current_data_meter/<device>')
def current_data_meter(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    _current_data_meter(data['Body'], device)
    return "OK"


@post('/current_data_storages/<device>')
def current_data_storages(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    _current_data_storages(data['Body'], device)
    return "OK"


@post('/current_data_sensorcard/<device>')
def current_data_sensorcard(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/current_data_sensorcard".format(config.mqtt_topic, device)
# TODO not yet implemented
    return "OK"


@post('/current_data_stringcontrol/<device>')
def current_data_stringcontrol(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/current_data_stringcontrol".format(config.mqtt_topic, device)
# TODO not yet implemented
    return "OK"


@post('/datamanager_io_states/<device>')
def datamanager_io_states(device):
    data = extract_request_data()
    topic_base = "{}/{}/datamanager_io_states".format(config.mqtt_topic, device)
    for p, d in data.items():
        for k, v in d.items():
            if v is not None:
                topic = "{}/{}/{}".format(topic_base, p.replace(' ', '_'), k.lower())
                iot_daemonize.mqtt_client.publish(topic, v)
    return "OK"


@post('/logdata_errors_and_events/<device>')
def logdata_errors_and_events(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/logdata_errors_and_events".format(config.mqtt_topic, device)
    return "OK"


@post('/logdata_data/<device>')
def logdata_data(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/logdata_data".format(config.mqtt_topic, device)
    return "OK"


def _power_flow(data: Dict[str, Any], device: str):
    topic_base = "{}/{}/current_data_powerflow".format(config.mqtt_topic, device)
    if 'Site' in data:
        for k, v in data['Site'].items():
            if v is not None:
                topic = "{}/site/{}".format(topic_base, k.lower())
                iot_daemonize.mqtt_client.publish(topic, v)
    if 'Inverters' in data:
        for i, d in data['Inverters'].items():
            for k, v in d.items():
                if v is not None:
                    topic = "{}/{}/{}".format(topic_base, i, k.lower())
                    iot_daemonize.mqtt_client.publish(topic, v)


def _current_data_inverter(data: Dict[str, Any], device: str):
    topic_base = "{}/{}/current_data_inverter".format(config.mqtt_topic, device)
    if 'PAC' in data and 'Values' in data['PAC']:
        for k, v in data['PAC']['Values'].items():
            topic = "{}/pac/{}".format(topic_base, k)
            iot_daemonize.mqtt_client.publish(topic, v)
    if 'DAY_ENERGY' in data and 'Values' in data['DAY_ENERGY']:
        for k, v in data['DAY_ENERGY']['Values'].items():
            topic = "{}/day_energy/{}".format(topic_base, k)
            iot_daemonize.mqtt_client.publish(topic, v)
    if 'YEAR_ENERGY' in data and 'Values' in data['YEAR_ENERGY']:
        for k, v in data['YEAR_ENERGY']['Values'].items():
            topic = "{}/year_energy/{}".format(topic_base, k)
            iot_daemonize.mqtt_client.publish(topic, v)
    if 'TOTAL_ENERGY' in data and 'Values' in data['TOTAL_ENERGY']:
        for k, v in data['TOTAL_ENERGY']['Values'].items():
            topic = "{}/total_energy/{}".format(topic_base, k)
            iot_daemonize.mqtt_client.publish(topic, v)


def _current_data_meter(data: Dict[str, Any], device: str):
    topic_base = "{}/{}/current_data_meter".format(config.mqtt_topic, device)
    for m, d in data.items():
        for k, v in d.items():
            if v is not None and type(v) in [int, float, str] :
                topic = "{}/{}/{}".format(topic_base, m, k.lower())
                iot_daemonize.mqtt_client.publish(topic, v)


def _current_data_storages(data: Dict[str, Any], device: str):
    topic_base = "{}/{}/current_data_storages".format(config.mqtt_topic, device)
    for s, d in data.items():
        if 'Controller' in d:
            for k, v in d['Controller'].items():
                if v is not None and type(v) in [int, float, str] :
                    topic = "{}/{}/{}".format(topic_base, s, k.lower())
                    iot_daemonize.mqtt_client.publish(topic, v)
        if 'Modules' in d:
            for m in d['Modules']:
                serial = m['Details']['Serial']
                for k, v in m.items():
                    if v is not None and type(v) in [int, float, str] :
                        topic = "{}/{}/{}/{}".format(topic_base, s, serial.lower(), k.lower())
                        iot_daemonize.mqtt_client.publish(topic, v)


def pull_fronius(stop):
    global config
    if config.devices is None:
        return
    loop = asyncio.new_event_loop()
    for device in config.devices:
        loop.create_task(pull_fronius_async(loop, device, stop))
    loop.run_forever()


async def pull_fronius_async(loop, device, stop):
    async with aiohttp.ClientSession(loop=loop) as session:
        while not stop():
            fronius = pyfronius.Fronius(session, device['host'])

            if 'power_flow' in device and device['power_flow']:
                def power_flow_callback(data: Dict[str, Any]) -> Dict[str, Any]:
                    _power_flow(data, device['device'])
                    return pyfronius.Fronius._system_power_flow(data)

                res = await fronius.current_power_flow(power_flow_callback)

            if 'system_meter' in device and device['system_meter']:
                def system_meter_callback(data: Dict[str, Any]) -> Dict[str, Any]:
                    _current_data_meter(data, device['device'])
                    return pyfronius.Fronius._system_meter_data(data)

                res = await fronius.current_system_meter_data(system_meter_callback)

            if 'system_inverter' in device and device['system_inverter']:
                def system_inverter_callback(data: Dict[str, Any]) -> Dict[str, Any]:
                    _current_data_inverter(data, device['device'])
                    return pyfronius.Fronius._system_inverter_data(data)

                res = await fronius.current_system_inverter_data(system_inverter_callback)

            if 'system_storage' in device and device['system_storage']:
                def system_storage_callback(data: Dict[str, Any]) -> Dict[str, Any]:
                    _current_data_storages(data, device['device'])
                    return pyfronius.Fronius._system_storage_data(data)

                res = await fronius.current_system_storage_data(system_storage_callback)

# TODO not yet implemented
            # if 'active_device_info' in device and device['active_device_info']:
            #     def power_flow_callback(data: Dict[str, Any]) -> Dict[str, Any]:
            #         _power_flow(data, device['device'])
            #         return pyfronius.Fronius._system_active_device_info(data)
            #     res = await fronius.current_active_device_info()
            # if 'inverter_info' in device and device['inverter_info']
            # if 'logger_info' in device and device['logger_info']
            # if 'system_ohmpilot' in device and device['system_ohmpilot'],
            # if 'device_meter' in device and type(device['device_meter']) is list
            # if 'device_storage' in device and type(device['device_storage']) is list
            # if 'device_inverter' in device and type(device['device_inverter']) is list

            time.sleep(5)
        print("Stopping pull_fronius_async for {}".format(device['host']))


def http_server(stop):
    run(server=iot_daemonize.http_server)


def main():
    global config

    config = configuration.MqttDaemonConfiguration(program ='fronius2mqtt', description ='Send the data from Fronius HTTP push and pull to MQTT')
    config.add_config_arg('iot_daemonize.mqtt_clientid', flags='--iot_daemonize.mqtt_clientid', default='fronius2mqtt',
                     help='The clientid to send to the MQTT server. Default is fronius2mqtt.')
    config.add_config_arg('mqtt_topic', flags='--mqtt_topic', default='fronius',
                     help='The topic to publish MQTT message. Default is fronius.')
    config.add_config_arg('http_host', flags='--http_host', default='localhost',
                     help='The address of the HTTP server. Default is localhost.')
    config.add_config_arg('http_port', flags='--http_port', default=8080,
                     help='The port of the HTTP server. Default is 8080.')
    config.add_config_arg('config', flags=['-c', '--config'], default='/etc/fronius2mqtt.conf',
                     help='The path to the config file. Default is /etc/fronius2mqtt.conf.')
    config.add_config_arg('devices',
                     help='The Fronius devices fetch data using the HTTP API.')
    config.parse_args()
    config.parse_config(config.config)

    iot_daemonize.init(config, mqtt = True, http = True, daemonize = True)

    iot_daemonize.daemon.add_task(pull_fronius)
    iot_daemonize.daemon.add_task(http_server)

    iot_daemonize.run()


if __name__ == "__main__":
    main()
