#!/usr/bin/env python

import argparse
import json
import logging
import os
import ssl
import time
import paho.mqtt.client as mqtt

from bottle import request, route, post, run


verify_mode = {
    'CERT_NONE': ssl.CERT_NONE,
    'CERT_OPTIONAL': ssl.CERT_OPTIONAL,
    'CERT_REQUIRED': ssl.CERT_REQUIRED
}

tls_versions = {
    'TLSv1': ssl.PROTOCOL_TLSv1,
    'TLSv1.1': ssl.PROTOCOL_TLSv1_1,
    'TLSv1.2': ssl.PROTOCOL_TLSv1_2
}


mqtt_client = None
daemon_args = None


def extract_request_body():
    body = request.body
    string = body.getvalue().decode('utf-8')
    return string


def extract_request_data():
    json_string = extract_request_body()
    data = json.loads(json_string)
    return data


def publish(topic, payload):
    mqtt_client.publish(topic, payload)
    if daemon_args.timestamp:
        mqtt_client.publish("{}/timestamp".format(topic), time.time(), retain=True)


@route('/')
def index():
    return "Hello World!<br/>This is the fronius2mqtt daemon by Gerrit Beine"


@post('/current_data_inverter/<device>')
def current_data_inverter(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/current_data_inverter".format(daemon_args.mqtt_topic, device)
    if 'PAC' in data['Body'] and 'Values' in data['Body']['PAC']:
        for k, v in data['Body']['PAC']['Values'].items():
            topic = "{}/pac/{}".format(topic_base, k)
            publish(topic, v)
    if 'DAY_ENERGY' in data['Body'] and 'Values' in data['Body']['DAY_ENERGY']:
        for k, v in data['Body']['DAY_ENERGY']['Values'].items():
            topic = "{}/day_energy/{}".format(topic_base, k)
            publish(topic, v)
    if 'YEAR_ENERGY' in data['Body'] and 'Values' in data['Body']['YEAR_ENERGY']:
        for k, v in data['Body']['YEAR_ENERGY']['Values'].items():
            topic = "{}/year_energy/{}".format(topic_base, k)
            publish(topic, v)
    if 'TOTAL_ENERGY' in data['Body'] and 'Values' in data['Body']['TOTAL_ENERGY']:
        for k, v in data['Body']['TOTAL_ENERGY']['Values'].items():
            topic = "{}/total_energy/{}".format(topic_base, k)
            publish(topic, v)
    return "OK"


@post('/current_data_meter/<device>')
def current_data_meter(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/current_data_meter".format(daemon_args.mqtt_topic, device)
    for m, d in data['Body'].items():
        for k, v in d.items():
            if v is not None and type(v) in [int, float, str] :
                topic = "{}/{}/{}".format(topic_base, m, k.lower())
                publish(topic, v)
    return "OK"


@post('/current_data_powerflow/<device>')
def current_data_powerflow(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/current_data_powerflow".format(daemon_args.mqtt_topic, device)
    if 'Site' in data['Body']:
        for k, v in data['Body']['Site'].items():
            if v is not None:
                topic = "{}/site/{}".format(topic_base, k.lower())
                publish(topic, v)
    if 'Inverters' in data['Body']:
        for i, d in data['Body']['Inverters'].items():
            for k, v in d.items():
                if v is not None:
                    topic = "{}/{}/{}".format(topic_base, i, k.lower())
                    publish(topic, v)
    return "OK"


@post('/current_data_storages/<device>')
def current_data_storages(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/current_data_storages".format(daemon_args.mqtt_topic, device)
    for s, d in data['Body'].items():
        if 'Controller' in d:
            for k, v in d['Controller'].items():
                if v is not None and type(v) in [int, float, str] :
                    topic = "{}/{}/{}".format(topic_base, s, k.lower())
                    publish(topic, v)
        if 'Modules' in d:
            for m in d['Modules']:
                serial = m['Details']['Serial']
                for k, v in m.items():
                    if v is not None and type(v) in [int, float, str] :
                        topic = "{}/{}/{}/{}".format(topic_base, s, serial.lower(), k.lower())
                        publish(topic, v)
    return "OK"


@post('/current_data_sensorcard/<device>')
def current_data_sensorcard(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/current_data_sensorcard".format(daemon_args.mqtt_topic, device)
# TODO not yet implemented
    return "OK"


@post('/current_data_stringcontrol/<device>')
def current_data_stringcontrol(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/current_data_stringcontrol".format(daemon_args.mqtt_topic, device)
# TODO not yet implemented
    return "OK"


@post('/datamanager_io_states/<device>')
def datamanager_io_states(device):
    data = extract_request_data()
    topic_base = "{}/{}/datamanager_io_states".format(daemon_args.mqtt_topic, device)
    for p, d in data.items():
        for k, v in d.items():
            if v is not None:
                topic = "{}/{}/{}".format(topic_base, p.replace(' ', '_'), k.lower())
                publish(topic, v)
    return "OK"


@post('/logdata_errors_and_events/<device>')
def logdata_errors_and_events(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/logdata_errors_and_events".format(daemon_args.mqtt_topic, device)
    return "OK"


@post('/logdata_data/<device>')
def logdata_data(device):
    data = extract_request_data()
    if not 'Body' in data:
        return "Empty"
    topic_base = "{}/{}/logdata_data".format(daemon_args.mqtt_topic, device)
    return "OK"


def init_mqtt():
    logging.debug('Starting MQTT')
    global daemon_args
    mqtt_client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, daemon_args.mqtt_clientid)
    if daemon_args.mqtt_tls:
        cert_reqs = verify_mode[daemon_args.mqtt_verify_mode] if daemon_args.mqtt_verify_mode in verify_mode else None
        tls_version = tls_versions[daemon_args.mqtt_tls_version] if daemon_args.mqtt_tls_version in tls_versions else None
        ca_certs = daemon_args.mqtt_ssl_ca_path if daemon_args.mqtt_ssl_ca_path else None
        mqtt_client.tls_set(ca_certs=ca_certs, cert_reqs=cert_reqs, tls_version=tls_version)
        mqtt_client.tls_insecure_set(daemon_args.mqtt_tls_no_verify)
    if daemon_args.verbose:
        mqtt_client.enable_logger()
    if daemon_args.mqtt_user is not None and daemon_args.mqtt_password is not None:
        mqtt_client.username_pw_set(daemon_args.mqtt_user, daemon_args.mqtt_password)
    mqtt_client.connect(daemon_args.mqtt_host, daemon_args.mqtt_port, daemon_args.mqtt_keepalive)
    return mqtt_client


def start_http():
    global daemon_args
    run(host=daemon_args.http_host, port=daemon_args.http_port, debug=daemon_args.verbose)


def parse_args():
    parser = argparse.ArgumentParser(
            prog='fronius2mqtt',
            description='Send the data from Fronius HTTP push to MQTT',
            epilog='Have a lot of fun!')
    parser.add_argument('-m', '--mqtt_host', type=str,
            default='localhost',
            help='The hostname of the MQTT server. Default is localhost')
    parser.add_argument('--mqtt_port', type=int,
            default=1883,
            help='The port of the MQTT server. Default is 1883')
    parser.add_argument('--mqtt_keepalive', type=int,
            default=30,
            help='The keep alive interval for the MQTT server connection in seconds. Default is 30')
    parser.add_argument('--mqtt_clientid', type=str,
            default='fronius2mqtt',
            help='The clientid to send to the MQTT server. Default is fronius2mqtt')
    parser.add_argument('-u', '--mqtt_user', type=str,
            help='The username for the MQTT server connection.')
    parser.add_argument('-p', '--mqtt_password', type=str,
            help='The password for the MQTT server connection.')
    parser.add_argument('-t', '--mqtt_topic', type=str,
            default='fronius',
            help='The topic to publish MQTT message. Default is fronius')
    parser.add_argument('--mqtt_tls',
            default=False,
            action='store_true',
            help='Use SSL/TLS encryption for MQTT connection.')
    parser.add_argument('--mqtt_tls_version', type=str,
            default='TLSv1.2',
            help='The TLS version to use for MQTT. One of TLSv1, TLSv1.1, TLSv1.2. Default is TLSv1.2')
    parser.add_argument('--mqtt_verify_mode', type=str,
            default='CERT_REQUIRED',
            help='The SSL certificate verification mode. One of CERT_NONE, CERT_OPTIONAL, CERT_REQUIRED. Default is CERT_REQUIRED')
    parser.add_argument('--mqtt_ssl_ca_path', type=str,
            help='The SSL certificate authority file to verify the MQTT server.')
    parser.add_argument('--mqtt_tls_no_verify',
            default=False,
            action='store_true',
            help='Do not verify SSL/TLS constraints like hostname.')
    parser.add_argument('--http_host', type=str,
            default='localhost',
            help='The address of the HTTP server. Default is localhost')
    parser.add_argument('--http_port', type=int,
            default=8080,
            help='The port of the HTTP server. Default is 8080')
    parser.add_argument('-z', '--timestamp',
            default=False,
            action='store_true',
            help='Publish timestamps for all topics, e.g. for monitoring purposes.')
    parser.add_argument('-c', '--config', type=str,
            default='/etc/fronius2mqtt.conf',
            help='The path to the config file. Default is /etc/fronius2mqtt.conf')
    parser.add_argument('-v', '--verbose',
            default=False,
            action='store_true',
            help='Be verbose while running.')
    args = parser.parse_args()
    return args


def parse_config():
    global daemon_args

    if not os.path.isfile(daemon_args.config):
        return

    with open(daemon_args.config, "r") as config_file:
        data = json.load(config_file)
        if 'mqtt_host' in data:
            daemon_args.mqtt_host = data['mqtt_host']
        if 'mqtt_port' in data:
            daemon_args.mqtt_port = int(data['mqtt_port'])
        if 'mqtt_keepalive' in data:
            daemon_args.mqtt_keepalive = int(data['mqtt_keepalive'])
        if 'mqtt_clientid' in data:
            daemon_args.mqtt_clientid = data['mqtt_clientid']
        if 'mqtt_user' in data:
            daemon_args.mqtt_user = data['mqtt_user']
        if 'mqtt_password' in data:
            daemon_args.mqtt_password = data['mqtt_password']
        if 'mqtt_topic' in data:
            daemon_args.mqtt_topic = data['mqtt_topic']
        if 'mqtt_tls' in data:
            daemon_args.mqtt_tls = data['mqtt_tls'].lower() == 'true'
        if 'mqtt_tls_version' in data:
            daemon_args.mqtt_tls_version = data['mqtt_tls_version']
        if 'mqtt_verify_mode' in data:
            daemon_args.mqtt_verify_mode = data['mqtt_verify_mode']
        if 'mqtt_ssl_ca_path' in data:
            daemon_args.mqtt_ssl_ca_path = data['mqtt_ssl_ca_path']
        if 'mqtt_tls_no_verify' in data:
            daemon_args.mqtt_tls_no_verify = data['mqtt_tls_no_verify'].lower() == 'true'
        if 'http_host' in data:
            daemon_args.http_host = data['http_host']
        if 'http_port' in data:
            daemon_args.http_port = int(data['http_port'])
        if 'timestamp' in data:
            daemon_args.timestamp = data['timestamp'].lower() == 'true'
        if 'verbose' in data:
            daemon_args.verbose = data['verbose'].lower() == 'true'


def main():
    global daemon_args, mqtt_client
    # Configuration
    daemon_args = parse_args()
    parse_config()
    # Verbosity
    if daemon_args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    # MQTT connection
    mqtt_client = init_mqtt()
    mqtt_client.loop_start()
    # HTTP server
    start_http()


if __name__ == "__main__":
    main()
